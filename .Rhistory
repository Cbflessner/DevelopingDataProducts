y<-sin(x)+rnorm(n,sd=.3)
splineTerms<-sapply(knots, function(knot) (x>knot)*(x-knot)^2)
xMat<-cbind(1,x,x^2,splineTerms)
xMat
dim(xMat)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
n<-500
x<-seq(0,4*pi,length=n)
y<-sin(x)
y<-sin(x)+rnorm(n,sd=.3)
knots<-seq(0,8*pi, length=20)
splineTerms<-sapply(knots, function(knot) (x>knot)*(x-knot))
length(splineTerms)
head(splineTerms,10)
dim(splineterms)
dim(splineTerms)
knots
View(head(splineTerms,100))
View(head(splineTerms,1000))
xMat<-cbind(1,x,splineTerms)
dim(xMat)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot<-0
splineTerms<-sapply(knot,function(knot)(x>knot)*(x-knot)^2)
splineTerms<-sapply(knot,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
splineTerms
fit<-lm(y~xMat-1)
summary(fit)
plot(x,y,PCH=21, bg="lightblue",cex=2)
plot(x,y,pch=21, bg="lightblue",cex=2)
yhat<-predict(fit)
lines(x,yhat,col="red".lwd=2)
lines(x,yhat,col="red",lwd=2)
n
x
x<-seq(0,4*pi, length=n)
y<-sin(x)+rnorm(n,sd=.3)
?rnorm
knots
knots<-seq(0,8*pi, length=20)
knots
splineTerms<-sapply(knots, function(knot)(x>knot)*(x-knot))
View(splineTerms)
class(splineTerms)
head(x,20)
xMat<-cbind(1,x,splineTerms)
fit<-lm(y~xMat-1)
summary(fit)
yhat<-predict(fit)
dim(yhat)
length(yhat)
View(yhat)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(predictors)
rm(list=ls())
data(AlzheimerDisease)
dim(predictors)
dim(diagnosis)
head(diagnosis)
library(caret)
install.packages("caret")
library(caret)
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
class(inTrain)
dim(inTrain)
head(inTrain)
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
dim(training)
dim(testing)
library(ggplot2)
g<-ggplot(concrete, aes(x=seq_along(CompressiveStrength),y=CompressiveStrength))
g
g+geom_point(aes(col=Cement))
g<-ggplot(training, aes(x=seq_along(CompressiveStrength),y=CompressiveStrength))
g+geom_point(aes(col=Cement))
str(training)
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
?cut2
x <- runif(1000, 0, 100)
z <- cut2(x, c(10,20,30))
table(z)
table(cut2(x, g=10))
training$Cement<-cut2(training$Cement, g=5)
table(training$Cement)
g+geom_point(aes(col=Cement))
summary(training$FlyAsh)
training$FlyAsh<-cut2(training$FlyAsh,g=5)
g+geom_point(aes(col=FlyAsh))
g+geom_point(aes(col=Age))
cor(seq_along(training$CompressiveStrength),training$CompressiveStrength, method = c("pearson", "kendall", "spearman"))
cor(seq_along(training$CompressiveStrength),training$CompressiveStrength, )
cor(seq_along(training$CompressiveStrength),training$CompressiveStrength)
q<-qplot(training, Superplaasticizer)
q
q<-qplot(training, Superplasticizer)
q
str(training)
q<-qplot(training, Superplasticizer)
q
g<-ggplot(training, aes(Superplasticizer))
g+geom_histogram()
summary(training$Superplasticizer)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
dim(training)
train_il<-training%>%select(^IL)
train_il<-training%>%select(select_vars(names(training),starts_with('IL')))
library(dplyr)
train_il<-training%>%select(select_vars(names(training),starts_with('IL')))
dim(train_il)
View(train_il)
dim(train)
dim(training)
names(training)
pca<-preProcess(train_il, method="pca", thresh=.8)
dim(pca)
head(pca)
pca$rotation
set.seed(3433
)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train_il<-training%>%select(select_vars(names(training),starts_with('IL')),diagnosis)
pcomp<-preProcess(train_il, method="pca", thresh=.8)
pcomp$rotation
fit<-train(diagnosis~., method="glm", data=train_il)
library(caret)
head(train_il)
fit<-train(diagnosis~., data=trail_il, method="glm")
fit<-train(diagnosis~., data=train_il, method="glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
fit<-train(diagnosis~., data=train_il, method="glm")
library(caret)
fit<-train(diagnosis~., data=train_il, method="glm")
dim(train_il)
pcomp<-preProcess(train_il[,-13], method="pca", thresh=.8)
pcomp$rotation
trainpc<-predict(pcomp, train_il[,-13])
fit_pca<-train(trail_il$diagnosis, method="glm",data=trainpc)
fit_pca<-train(train_il$diagnosis, method="glm",data=trainpc)
head(trainpc)
fit<-train(diagnosis~., data=trainpc, method="glm")
dim(trainpc)
dim(train_il)
fit<-train(train_il$diagnosis~., data=trainpc, method="glm")
fit<-train(diagnosis~., data=train_il, method="glm")
fit_pca<-train(train_il$diagnosis~., data=trainpc, method="glm")
trainpc<-cbind(trainpc,train_il$diagnosis)
fit_pca<-train(train_il$diagnosis~., data=trainpc, method="glm")
pcomp<-preProcess(train_il, method="pca", thresh=.8)
pcomp$rotation
trainpc<-predict(pcomp,train_il)
fit_pca<-train(train_il$diagnosis~.,method="glm",data=trainpc )
preProc <- preProcess(train_il[,-13],method="pca",thresh=.8)
trainPC<-predict(preProc, train_il[,-13])
fit_pca<-train(train_il$diagnosis~., method="glm", data=trainPC)
names(train_il
)
names(trainPC)
pc_training_obj <- preProcess(train_il[, -13], method='pca', thresh=0.8)
pc_training_preds <- predict(pc_training_obj, train_il[, -13])
fit_pca<-train(train_il$diagnosis ~ ., data=pc_training_preds, method="glm")
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
names(train_il)
dim(new_training)
dim(train_il)
pc_training_obj <- preProcess(new_training[, -13], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_preds <- predict(pc_training_obj, new_training[, -13])
pca_model <- train(new_training$diagnosis ~ ., data=pc_training_preds, method="glm")
getwd()
source(test.R)
source("test.R")
rm(list=ls())
source("test.R")
source("test.R")
source("test.R")
source("test.R")
summary(matrix_modelPCA)
matrix_modelPCA$overall
pcomp<-preProcess(trainingIL, method="pca", thresh=.8)
pcomp<-preProcess(trainingIL[,-13], method="pca", thresh=.8)
pcomp$rotation
head(trainingIL)
pcomp<-preProcess(trainingIL[,-1], method="pca", thresh=.8)
pcomp$rotation
trainPC<-predict(pcomp,trainIL[,-1])
trainPC<-predict(pcomp,trainingIL[,-1])
fit_pca<-train(trainingIL[1]~., method="glm", data=trainPC)
fit_pca<-train(trainingIL$diagnosis~., method="glm", data=trainPC)
diagnosis<-trainingIL[1]
fit_pca<-train(diagnosis~., method="glm", data=trainPC)
trainPC<-cbind(trainPC,diagnosis)
fit_pca<-train(diagnosis~., method="glm", data=trainPC)
predictions_pca<-predict(fit_pca,newdata=testingIL)
predictions_pca<-predict(fit_pca,testingIL)
rm(list=ls())
set.seed(3433)
adData = data.frame(diagnosis,predictors)
library(AppliedPredictiveModeling)
adData = data.frame(diagnosis,predictors)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
nTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train_il<-training %>% select(select_vars(names(training), starts_with('IL')))
dim(training)
dim(training_il)
dim(train_il)
train_il<-cbind(train_il, training$diagnosis)
test_il<-testing %>% select(select_vars(names(training), starts_with('IL')))
test_il<-cbind(test_il,testing$diagnosis)
pcomp<-preProcess(train_il, method="pca", thresh=.8)
pcomp$rotation
pcomp<-preProcess(train_il[,-13], method="pca", thresh=.8)
head(train_il)
names(train_il)[13]<-diagnosis
names(train_il)[13]
names(train_il)
head(train_il)
pcomp<-preProcess(train_il[,-13], method="pca", thresh=.8)
train_il<-training %>% select(select_vars(names(training), starts_with('IL')))
names(train_il)
train_il<-cbind(train_il, training$diagnosis)
head(train_il)
names(train_il)
names(train_il)[13]
names(train_il)[13]<-"diagnosis"
names(train_il)[13]
pcomp<-preprocess(train_il[,-13],method="glm",thresh=.8)
pcomp<-preProcess(train_il[,-13],method="glm",thresh=.8)
pcomp<-preProcess(train_il[,-13],method="pca",thresh=.8)
trainPc<-predict(pcomp,train_il[,-13])
fit_pca<-train(train_il$diagnosis~., method="glm", data=trainPc)
head(train_il)
fit_pca<-train(train_il$diagnosis~., method="glm", data=trainPc)
head(trainPc)
source("test.r")
source("test.r")
rm(list=ls())
source("test.r")
library(dbply)
library(dply)
library(dplyr)
train_il<-training %>% select(starts_with"IL")
train_il<-training %>% select(starts_with("IL"))
dim(train_il)
train_il<-training %>% select(starts_with("IL"),diagnosis)
dim(train_il)
View(head(train_il))
test_il<-testing %>% select(starts_with("IL"),diagnosis)
dim(test_il)
fit<-train(diagnosis~., data=train_il, method="glm")
fit$overall
summary(fit)
matrix<-confustionMatrix(test_il$diagnosis, predict(fit, test_il))
matrix<-confusionMatrix(test_il$diagnosis, predict(fit, test_il))
matrix$overall
fit_pca<-train(diagnosis~., data=train_il, method="glm", preProcess("pca"), trControl=trainControl(preProcOptions=list(thres=0.8)))
fit_pca<-train(diagnosis~., data=train_il, method="glm", preProcess="pca", trControl=trainControl(preProcOptions=list(thres=0.8)))
matrix_pca<-confusionMatrix(test_il$diagnosis, predict(fit_pca, test_il))
matrix_pca$overall
summary(matrix_pca)
matrix_pca
matrix_pca$overall
matrix$overall
sessionInfo()
data(segmentationOriginal)
rm(list=ls())
data(segmentationOriginal)
str(segmentationOriginal)
train<-segmentationOriginal %>% filter(Case=="train")
dim(train)
train<-segmentationOriginal %>% filter(Case=="Train")
dim(train)
test<-segmentationOriginal %>% filter(Case=="Test")
dim(test)
set.seed(125)
fit<-train(Case~., data=train, method="rpart")
str(train)
fit<-train(Class~., data=train, method="rpart")
fit$finalModel
plot(fit)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(fit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
dim(olive)
View(olive)
olive<-olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(t(olive))
fit<-train(Area~., data=olive, method="rpart")
fit$finalModel
predict(fit,newdata=newdata)
source(test.R)
source("test.R"")
source("test.R")
install.packages("ElemStatLearn")
source("test.R")
rm(list=ls())
source("test.R")
set.seed(13234)
str(train)
dim(train)
dim(trainSA)
str(trainSA)
?SAheart
fit<-glm(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prediction<-predict(fit, trainSA)
values<-trainSA$chd
missClass(values,prediction)
prediction<-predict(fit, testSA)
values<-testSA$chd
missClass(values,prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train<-factor(vowel.train)
vowel.test<-factor(vowel.test)
str(vowel.train)
data(vowel.test)
data(vowel.train)
vowel.test$y<-factor(vowel.test$y)
vowel.train$y<-factor(vowel.train$y)
set.seed(33833)
dim(vowel.train)
dim(vowel.test)
fit<-train(y~., data=vowel.train, method="rf")
?varImp
varImp(fit)
sessionInfo()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(list=ls())
data(vowel.train)
data(vowel.test)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
set.seed(33833)
library(caret)
dim(vowel.test)
dim(vowel.train)
View(vowel.train)
View(vowel.test)
fit<-train(y~., data= vowel.train, method="rf")
fit1<-train(y~.,data=vowl.train, method="gbm")
fit1<-train(y~.,data=vowel.train, method="gbm")
pred<-predict(fit,vowel.test)
pred1<-predict(fit1,vowel.test)
predDF<-data.frame(pred, pred1, y=vowel.test$y)
combFit<-train(y~., data=predDF, method="gam")
head(predDF)
?confusionMatrix
matrix<-confusionMatrix(data=predDF,y,pred)
head(predDF)
matrix<-confusionMatrix(predDF$y,predDF$pred)
matrix1<-confusionMatrix(predDF$y,predDF$pred1)
matrix$overall
matrix1$overall
library(dplyr)
count(predDF$y)
str(predDF)
predDF<-mutate(predDF, agree=ifelse(pred==pred1,pred,0))
View(predDF)
matrix_agree<-confusionMatrix(predDF$agree, predDF$y)
str(predDF
)
predDF$agree<-factor(predDF$agree)
str(predDF
)
matrix_agree<-confusionMatrix(predDF$agree, predDF$y)
levels(predDF$pred)<-c(levels(predDF$pred,0))
levels(predDF$pred)<-c(levels(predDF$pred),0)
str(predDF)
levels(predDF$pred1)<-c(levels(predDF$pred1),0)
str(predDF)
matrix_agree<-confusionMatrix(predDF$agree, predDF$y)
levels(predDF$y)<-c(levels(predDF$y),0)
matrix_agree<-confusionMatrix(predDF$agree, predDF$y)
?relevel
predDF$y<-relevel(predDF$y, 0)
predDF$y<-relevel(predDF$y, "0")
str(predDF)
matrix_agree<-confusionMatrix(predDF$agree, predDF$y)
matrix_agree$overall
matrix$overall
matrix1$overall
predDF_agree<-predDF %>% filter(agree<>0)
predDF_agree<-predDF %>% filter(agree!=0)
dim(predDF_agree)
matrix_agree<-confusionMatrix(predDF_agree$agree, predDF_agree$y)
matrix_agree$overall
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
summary(matrix)
matrix
View(training)
fit_rf<-train(diagnosis~., data=training, method="rf")
fit_gbm<-train(diagnosis~., data=training, method="gbm", verbose=FALSE)
fit_lda<-train(diagnosis~., data=training, method="lda")
pred_rf<-predict(fit_rf,training)
pred_gbm<-predict(fit_gbm,training)
pred_lda<-predict(fit_lda,training)
predDF<-data.frame(pred_rf, pred_gbm, pred_lda, training$y)
length(pred_rf)
length(pred_gbm)
length(pred_lda)
dim(training)
predDF<-data.frame(pred_rf, pred_gbm, pred_lda, diagnosis=training$diagnosis)
View(predDF)
pred_comb<-train(diagnosis~., data=predDF, method="rf")
pred_rf<-predict(fit_rf,testing)
matrix_rf<-confusionMatrix(pred_rf, testing$diagnosis)
matrix_rf$overall
matrix_gbm<-confusionMatrix(pred_gbm, testing$diagnosis)
pred_gbm<-predict(fit_gbm,testing)
pred_lda<-predict(fit_lda,testing)
matrix_gbm<-confusionMatrix(pred_gbm, testing$diagnosis)
matrix_lda<-confusionMatrix(pred_lda, testing$diagnosis)
predDF<-data.frame(pred_rf, pred_gbm, pred_lda, diagnosis=testing$diagnosis)
pred_comb<-train(diagnosis~., data=predDF, method="rf")
fit_comb<-train(diagnosis~., data=predDF, method="rf")
pred_comb<-predict(fit_comb,testing)
matrix_comb<-confusionMatrix(pred_comb,testing$diagnosis)
matrix_comb$overall
matrix_gbm$overall
matrix_lda$overall
matrix_rf$overall
?colSums
sessionInfo()
?show
?predict
?lm
?mean
?dgamma
methods("show")
methods("dgamma")
methods("mean")
methods("colSums")
methods("predict")
showmethods("predict")
showMethods("predict")
methods(colSums())
methods("colSums")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
library(dplyr)
library(plotly)
quebec<-CO2 %>% filter(Type=="Quebec")
miss<-CO2 %>% filter(Type=="Mississippi")
plot_ly(miss, x=~conc , y=~uptake, type="scatter" , color=~Treatment,
mode="lines")%>% layout(title = 'Mississippi Grass')
#load libraries
library(dplyr)
library(plotly)
quebec<-CO2 %>% filter(Type=="Quebec")
miss<-CO2 %>% filter(Type=="Mississippi")
plot_ly(miss, x=~conc , y=~uptake, type="scatter" , color=~Treatment,
mode="lines")%>% layout(title = 'Mississippi Grass')
Quebec Grass
==========================================================
```{r echo=FALSE, message=FALSE, warning=FALSE}
plot_ly(quebec, x=~conc, y=~uptake, type="scatter" , color=~Treatment,
mode="lines")%>% layout(title = 'Quebec Grass')
getwd()
setwd("C:/Users/christian.flessner/Dropbox (ZirMed)/Christian Flessner/Coursera/Developing Data Products/DevelopingDataProducts")
